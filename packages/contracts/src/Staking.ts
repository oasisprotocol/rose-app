/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common.js";

export declare namespace Staking {
  export type DelegationStruct = { amount: BigNumberish; shares: BigNumberish };

  export type DelegationStructOutput = [amount: bigint, shares: bigint] & {
    amount: bigint;
    shares: bigint;
  };

  export type PendingDelegationStruct = {
    from: AddressLike;
    to: BytesLike;
    amount: BigNumberish;
  };

  export type PendingDelegationStructOutput = [
    from: string,
    to: string,
    amount: bigint
  ] & { from: string; to: string; amount: bigint };

  export type PendingUndelegationStruct = {
    from: BytesLike;
    to: AddressLike;
    shares: BigNumberish;
    costBasis: BigNumberish;
    endReceiptId: BigNumberish;
    epoch: BigNumberish;
  };

  export type PendingUndelegationStructOutput = [
    from: string,
    to: string,
    shares: bigint,
    costBasis: bigint,
    endReceiptId: bigint,
    epoch: bigint
  ] & {
    from: string;
    to: string;
    shares: bigint;
    costBasis: bigint;
    endReceiptId: bigint;
    epoch: bigint;
  };
}

export interface StakingInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "Delegate"
      | "DelegateDone"
      | "GetDelegations"
      | "GetDelegationsCount"
      | "GetPendingDelegationCount"
      | "GetPendingDelegations"
      | "GetUndelegationCount"
      | "GetUndelegations"
      | "Undelegate"
      | "UndelegateDone"
      | "UndelegateStart"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "OnDelegateDone"
      | "OnDelegateStart"
      | "OnUndelegateStart"
  ): EventFragment;

  encodeFunctionData(functionFragment: "Delegate", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "DelegateDone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetDelegations",
    values: [AddressLike, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "GetDelegationsCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "GetPendingDelegationCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "GetPendingDelegations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "GetUndelegationCount",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "GetUndelegations",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "Undelegate",
    values: [BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UndelegateDone",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "UndelegateStart",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "Delegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DelegateDone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetDelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetDelegationsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetPendingDelegationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetPendingDelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetUndelegationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "GetUndelegations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "Undelegate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "UndelegateDone",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UndelegateStart",
    data: BytesLike
  ): Result;
}

export namespace OnDelegateDoneEvent {
  export type InputTuple = [
    receiptId: BigNumberish,
    who: AddressLike,
    shares: BigNumberish
  ];
  export type OutputTuple = [receiptId: bigint, who: string, shares: bigint];
  export interface OutputObject {
    receiptId: bigint;
    who: string;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OnDelegateStartEvent {
  export type InputTuple = [
    who: AddressLike,
    to: BytesLike,
    amount: BigNumberish,
    receiptId: BigNumberish
  ];
  export type OutputTuple = [
    who: string,
    to: string,
    amount: bigint,
    receiptId: bigint
  ];
  export interface OutputObject {
    who: string;
    to: string;
    amount: bigint;
    receiptId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OnUndelegateStartEvent {
  export type InputTuple = [
    receiptId: BigNumberish,
    who: AddressLike,
    epoch: BigNumberish,
    shares: BigNumberish
  ];
  export type OutputTuple = [
    receiptId: bigint,
    who: string,
    epoch: bigint,
    shares: bigint
  ];
  export interface OutputObject {
    receiptId: bigint;
    who: string;
    epoch: bigint;
    shares: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Staking extends BaseContract {
  connect(runner?: ContractRunner | null): Staking;
  waitForDeployment(): Promise<this>;

  interface: StakingInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  Delegate: TypedContractMethod<[to: BytesLike], [bigint], "payable">;

  DelegateDone: TypedContractMethod<
    [receiptId: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  GetDelegations: TypedContractMethod<
    [in_who: AddressLike, in_offset: BigNumberish, in_pageSize: BigNumberish],
    [
      [string[], Staking.DelegationStructOutput[]] & {
        out_delegates: string[];
        out_delegations: Staking.DelegationStructOutput[];
      }
    ],
    "view"
  >;

  GetDelegationsCount: TypedContractMethod<
    [in_who: AddressLike],
    [bigint],
    "view"
  >;

  GetPendingDelegationCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  GetPendingDelegations: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint[], Staking.PendingDelegationStructOutput[]] & {
        receiptIds: bigint[];
        pendings: Staking.PendingDelegationStructOutput[];
      }
    ],
    "view"
  >;

  GetUndelegationCount: TypedContractMethod<
    [user: AddressLike],
    [bigint],
    "view"
  >;

  GetUndelegations: TypedContractMethod<
    [user: AddressLike],
    [
      [bigint[], Staking.PendingUndelegationStructOutput[]] & {
        receiptIds: bigint[];
        undelegations: Staking.PendingUndelegationStructOutput[];
      }
    ],
    "view"
  >;

  Undelegate: TypedContractMethod<
    [from: BytesLike, shares: BigNumberish],
    [bigint],
    "nonpayable"
  >;

  UndelegateDone: TypedContractMethod<
    [receiptId: BigNumberish],
    [void],
    "nonpayable"
  >;

  UndelegateStart: TypedContractMethod<
    [receiptId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "Delegate"
  ): TypedContractMethod<[to: BytesLike], [bigint], "payable">;
  getFunction(
    nameOrSignature: "DelegateDone"
  ): TypedContractMethod<[receiptId: BigNumberish], [bigint], "nonpayable">;
  getFunction(
    nameOrSignature: "GetDelegations"
  ): TypedContractMethod<
    [in_who: AddressLike, in_offset: BigNumberish, in_pageSize: BigNumberish],
    [
      [string[], Staking.DelegationStructOutput[]] & {
        out_delegates: string[];
        out_delegations: Staking.DelegationStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "GetDelegationsCount"
  ): TypedContractMethod<[in_who: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "GetPendingDelegationCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "GetPendingDelegations"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint[], Staking.PendingDelegationStructOutput[]] & {
        receiptIds: bigint[];
        pendings: Staking.PendingDelegationStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "GetUndelegationCount"
  ): TypedContractMethod<[user: AddressLike], [bigint], "view">;
  getFunction(
    nameOrSignature: "GetUndelegations"
  ): TypedContractMethod<
    [user: AddressLike],
    [
      [bigint[], Staking.PendingUndelegationStructOutput[]] & {
        receiptIds: bigint[];
        undelegations: Staking.PendingUndelegationStructOutput[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "Undelegate"
  ): TypedContractMethod<
    [from: BytesLike, shares: BigNumberish],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "UndelegateDone"
  ): TypedContractMethod<[receiptId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "UndelegateStart"
  ): TypedContractMethod<[receiptId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "OnDelegateDone"
  ): TypedContractEvent<
    OnDelegateDoneEvent.InputTuple,
    OnDelegateDoneEvent.OutputTuple,
    OnDelegateDoneEvent.OutputObject
  >;
  getEvent(
    key: "OnDelegateStart"
  ): TypedContractEvent<
    OnDelegateStartEvent.InputTuple,
    OnDelegateStartEvent.OutputTuple,
    OnDelegateStartEvent.OutputObject
  >;
  getEvent(
    key: "OnUndelegateStart"
  ): TypedContractEvent<
    OnUndelegateStartEvent.InputTuple,
    OnUndelegateStartEvent.OutputTuple,
    OnUndelegateStartEvent.OutputObject
  >;

  filters: {
    "OnDelegateDone(uint64,address,uint128)": TypedContractEvent<
      OnDelegateDoneEvent.InputTuple,
      OnDelegateDoneEvent.OutputTuple,
      OnDelegateDoneEvent.OutputObject
    >;
    OnDelegateDone: TypedContractEvent<
      OnDelegateDoneEvent.InputTuple,
      OnDelegateDoneEvent.OutputTuple,
      OnDelegateDoneEvent.OutputObject
    >;

    "OnDelegateStart(address,bytes21,uint256,uint64)": TypedContractEvent<
      OnDelegateStartEvent.InputTuple,
      OnDelegateStartEvent.OutputTuple,
      OnDelegateStartEvent.OutputObject
    >;
    OnDelegateStart: TypedContractEvent<
      OnDelegateStartEvent.InputTuple,
      OnDelegateStartEvent.OutputTuple,
      OnDelegateStartEvent.OutputObject
    >;

    "OnUndelegateStart(uint64,address,uint64,uint128)": TypedContractEvent<
      OnUndelegateStartEvent.InputTuple,
      OnUndelegateStartEvent.OutputTuple,
      OnUndelegateStartEvent.OutputObject
    >;
    OnUndelegateStart: TypedContractEvent<
      OnUndelegateStartEvent.InputTuple,
      OnUndelegateStartEvent.OutputTuple,
      OnUndelegateStartEvent.OutputObject
    >;
  };
}
